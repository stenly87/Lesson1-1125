using System;

namespace MyHappyFirstProgram
{
    // пространства имен включают в себя:
    // другие пространства имен
    // классы, структуры, перечисления, делегаты
    public class Program
    {
        public static void Main(string[] args)
        {
            // однострочный комментарий
            /*
             многострочный комментарий
            */
            // синтаксис создания переменной
            // тип имя; <- создание переменной
            // тип имя = значение; <- инициализация переменной

            // область жизни (видимости) переменной ограничена
            // телом, внутри которого она создана
            /*{
                int i = 0;
                i = 10;
                Console.WriteLine(i);
            }*/
            // переменные можно создавать внутри классов
            // и внутри методов 

            // группы типов данных: ссылочные и значимые
            // значимые типы данных позволяют хранить значение
            // на "стеке"
            // ссылочные типы данных чаще всего комплексные
            // т.е. состоят из других типов данных и обычно
            // хранятся в "куче"
            // стандартный размер стека 1МБ для 32-битных 
            // 4 МБ для 64-битных приложений

            // значимые типы:
            // числовые типы (целочисленные и дробные)
            // целые числа со знаком
            // sbyte 1B -2^7 - 2^7-1 (-128 до 127)
            // short 2B -2^15 - 2^15-1
            // int   4B -2^31 - 2^31-1
            // long  8B -2^63 - 2^63-1
            /*int i = 1000000000; 
            long l = i;
            Console.WriteLine(l);*/
            // целые числа без знака
            // byte    1B 0 - 2^8-1 (0 - 255)
            // ushort  2B 0 - 2^16-1
            // uint    4B 0 - 2^32-1
            // ulong   8B 0 - 2^64-1

            // дробные числа (значимые типы)
            // float    4B  // для вычислений, где не важна точность
            // double   8B  // для геометрических вычислений
            // decimal 16B  // для вычисления валютных операций

            // целое
            // 0000 0001

            // дробь
            // степень знак  мантисса - добавляется к e^степень
            // 00000 0  000000000000000

            // значимые типы
            // bool - логический тип (true false)  1B
            /*bool b = true; 
            bool f = false;
            b = f;
            // char - символьный тип данных
            // utf8
            char c = 'a'; // 2B

            // enum - перечисление значимый
            /*int w = (int)Week.Понедельник;
            Week ww = (Week)10;
            enum Week
            {
                Понедельник,
                Вторник
            }*/

            // struct - комплексный тип данных

            // ссылочные типы
            /*
            int i = 10;
            long l = i;  // для значимых данных тут происходит
            l = l + 1;
            // копирование значения
            // для ссылочных данных в подобной ситуации будет
            // производиться копирование ссылки

            // object - родительский тип для любых типов в C#
            object o = 1; // упаковка
            int i1 = (int)o; // распаковка

            // class - комплексный тип данных

            // delegate - делегат, ссылка на метод
            // event - событие

            // массивы/коллекции/словари
            // string -  тип данных который хранит текст
            string s1 = "привет";
            string s2 = s1; // копирование (так кажется)
            // строки в c# являются неизменяемыми объектами
            // на самом деле "изменение" строки приводит к
            // созданию новой строки, поэтому изменение s2 не
            // окажет влияния на s1

            // record - запись, тоже комплексный тип данных*/


            // иллюстрация разницы между ссылочными и значимыми
            Type1 obj1 = new();
            obj1.Value = 10;

            Type1 obj2 = obj1;
            Console.WriteLine($"obj1 = {obj1.Value}");
            Console.WriteLine($"obj2 = {obj2.Value}");
            obj1.Value = 20;
            Console.WriteLine($"obj1 = {obj1.Value}");
            Console.WriteLine($"obj2 = {obj2.Value}");
        }
    }

    class Type1
    {
        public int Value;
    }

}


